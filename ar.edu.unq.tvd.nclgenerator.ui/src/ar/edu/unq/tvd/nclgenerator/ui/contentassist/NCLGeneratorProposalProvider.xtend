/*
 * generated by Xtext 2.9.1
 */
package ar.edu.unq.tvd.nclgenerator.ui.contentassist

import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.emf.ecore.EObject

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class NCLGeneratorProposalProvider extends AbstractNCLGeneratorProposalProvider {
	
	override complete_Region(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var proposal = "region " + "name " + "{\n\n}"
		acceptor.accept(createCompletionProposal(proposal, context));
		super.complete_Region(model, ruleCall, context, acceptor)
	}
	
	override complete_MediaProperty(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var proposals = newArrayList("background","balanceLevel","bassLevel","bottom","bounds", "explicitDur", "fit", "focusIndex", "fontColor", "fontFamily",
			"fontSize", "fontStyle", "fontVariant", "fontWeight", "height", "left", "location", "plan", "playerLife", "reusePlayer",
			"right", "scroll", "size", "soundLevel", "style", "top", "transparency", "trebleLevel", "visible", "width", "zIndex"
		)
		for(p : proposals){
			acceptor.accept(createCompletionProposal(p, context));
			super.complete_MediaProperty(model, ruleCall, context, acceptor)
		}
	}
	
	override complete_RegionProperty(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var proposals = newArrayList("title","top","bottom","height","left","right","zIndex", "width")
		for(p : proposals){
			acceptor.accept(createCompletionProposal(p, context))
		super.complete_RegionProperty(model, ruleCall, context, acceptor)
		}
	}
	
	override complete_Key(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var proposals = newArrayList("BLUE", "GREEN", "YELLOW", "RED", "CURSOSR_DOWN", "CURSOSR_UP", "CURSOSR_LEFT", "CURSOR_RIGHT")
		for(p : proposals){
			acceptor.accept(createCompletionProposal(p, context))
			super.complete_Key(model, ruleCall, context, acceptor) 
		}
	}
	
}
