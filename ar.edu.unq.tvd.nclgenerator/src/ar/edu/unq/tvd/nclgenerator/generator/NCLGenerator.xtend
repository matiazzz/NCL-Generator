package ar.edu.unq.tvd.nclgenerator.generator

import ar.edu.unq.tvd.nclgenerator.nCLGenerator.NCL
import org.eclipse.xtext.generator.IFileSystemAccess
import static extension ar.edu.unq.tvd.nclgenerator.generator.MediaExtensions.*
import static extension ar.edu.unq.tvd.nclgenerator.generator.RegionExtensions.*
import static extension ar.edu.unq.tvd.nclgenerator.generator.NCLExtensions.*
import java.util.ArrayList

class NCLGenerator {
	
	protected NCL ncl
	
	def generateNCL(IFileSystemAccess fsa, NCL ncl) {
		this.ncl = ncl
		fsa.generateFile(ncl.name + '.ncl', generate)
		
		for (mediaText : mediaTexts) {
			fsa.generateFile(mediaText.name + '.txt', mediaText.text)
		}
	}
	
	def generate(){
		'''
		<?xml version="1.0" encoding="ISO-8859-1"?>
		<!-- Generated by NCL Generator -->
		<ncl id="«ncl.name»" xmlns="http://www.ncl.org.br/NCL3.0/EDTVProfile">
		    <head>
		    	«generateRegions»
		        «generateDescriptors»
		        «generateConnectors»
		    </head>
		    <body>
		        «generatePorts»
		        <media id="keys" type="application/x-ginga-settings">
		      		<property name="channel.keyCapture" value="colored_keys,selection_keys,cursor_keys,numeric_keys"/>
		        </media>
		        «generateMedias»
		        «generateLinks»
		    </body>
		</ncl>
		'''
	}
	
	def getMediaTexts(){
		var ArrayList<MediaText> mediaTexts = newArrayList()
		for (media : ncl.medias) {
			if(media.isText)
				mediaTexts.add(new MediaText(media.name + "Text", media.text))
		}
		mediaTexts
	}
	
	def generateConnectors(){
		'''		
		<connectorBase>
			«FOR media: ncl.mediasWithEvents»
			«media.addCausalConnector»
			«ENDFOR»
		</connectorBase>
		'''
	}
	
	def generateLinks(){
		'''
		«FOR media: ncl.mediasWithEvents»
		«media.addLinks»
		«ENDFOR»
		'''
	}
	
	
	def generateMedias() {
		'''
		«FOR media: ncl.medias»
		<media id="«media.FirstUpperName»" «media.addSrcOrType» «media.addDescriptor» «media.addProperties»
		«ENDFOR»
		'''
	}
	
	def generatePorts() {
		'''
		«FOR media: ncl.medias»
			«IF media.isStart»
				<port id="port«media.FirstUpperName»" component="«media.FirstUpperName»"/> 
			«ENDIF»
		«ENDFOR»
		'''
	}
	
	def generateRegions() {
		'''
		<regionBase>
			«IF ncl.hasRegions»
				«FOR region: ncl.regions»	
					<region id="«region.FirstUpperName»" «region.addProperties»/>
				«ENDFOR»
			«ENDIF»
			«generateMediaRegions»
		</regionBase>
		'''
	}
	
	def generateMediaRegions(){
		'''
		«FOR media: ncl.medias»
			«IF !media.hasRegion»    
				<region id="Reg«media.FirstUpperName»" «media.addRegionProperties»/>
			«ENDIF»
		«ENDFOR»
		'''
	}
	
	def generateDescriptors() {
		'''		
		<descriptorBase>
		«IF ncl.hasRegions»
		«FOR region: ncl.regions»    <descriptor id="desc«region.FirstUpperName»" region="«region.FirstUpperName»"/>
		«ENDFOR»
		«ENDIF»
		«generateMediaDesc»
		</descriptorBase>
		'''
	}
	
	def generateMediaDesc(){
		'''
		«FOR media: ncl.medias»
		«IF !media.hasRegion»    <descriptor id="desc«media.FirstUpperName»" region="Reg«media.FirstUpperName»"/>«ENDIF»
		«ENDFOR»
		'''
	}
	
}

class MediaText {
	public val String text
	public val String name 
	
	new(String name, String text){
		this.text = text
		this.name = name
	}
}