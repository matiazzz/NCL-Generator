package ar.edu.unq.tvd.nclgenerator.generator

import ar.edu.unq.tvd.nclgenerator.nCLGenerator.NCL
import org.eclipse.xtext.generator.IFileSystemAccess
import static extension ar.edu.unq.tvd.nclgenerator.generator.MediaExtensions.*
import static extension ar.edu.unq.tvd.nclgenerator.generator.RegionExtensions.*
import static extension ar.edu.unq.tvd.nclgenerator.generator.NCLExtensions.*

class NCLGenerator {
	
	protected NCL ncl
	
	def generateNCL(IFileSystemAccess fsa, NCL ncl) {
		this.ncl = ncl
		fsa.generateFile(ncl.name + '.ncl', generate)
	}
	
	def generate(){
		'''
		<?xml version="1.0" encoding="ISO-8859-1"?>
		<!-- Generated by NCL Generator -->
		<ncl id="«ncl.name»" xmlns="http://www.ncl.org.br/NCL3.0/EDTVProfile">
		    <head>
		    	«generateRegions»
		    	
		        «generateDescriptors»
		    </head>
		
		    <body>
		        «generatePorts»
		        
		        «generateMedias»
		    </body>
		</ncl>
		'''
	}
	
	def generateMedias() {
		'''
		«FOR media: ncl.medias»
		<media id="«media.FirstUpperName»" «media.addSrcOrType» «media.addDescriptor»>
			«media.addProperties»
		<media/>
		 
		«ENDFOR»
		'''
	}
	
	def generatePorts() {
		'''
		«FOR media: ncl.medias»
		«IF media.startAtTheBeginning == 'true'»
			<port id="port«media.FirstUpperName»" component="«media.FirstUpperName»"/> 
		«ENDIF»
		«ENDFOR»
		'''
	}
	
	def generateRegions() {
		'''
		«IF ncl.hasRegions»
		<regionBase>
		«FOR region: ncl.regions»    <region id="«region.FirstUpperName»" «region.addProperties»/>
		«ENDFOR»
		</regionBase>
		«ENDIF»
		'''
	}
	
	def generateDescriptors() {
		'''
		«IF ncl.hasRegions»
		<descriptorBase>
		«FOR region: ncl.regions»    <descriptor id="desc«region.FirstUpperName»" region="«region.FirstUpperName»"/>
		«ENDFOR»
		</descriptorBase>
		«ENDIF»
		'''
	}
	
}