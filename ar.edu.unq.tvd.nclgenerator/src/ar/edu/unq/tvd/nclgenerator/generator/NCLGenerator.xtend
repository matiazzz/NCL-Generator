package ar.edu.unq.tvd.nclgenerator.generator

import ar.edu.unq.tvd.nclgenerator.nCLGenerator.NCL
import org.eclipse.xtext.generator.IFileSystemAccess
import static extension ar.edu.unq.tvd.nclgenerator.generator.NCLExtensions.*
import static extension ar.edu.unq.tvd.nclgenerator.generator.MediaExtensions.*
import static extension ar.edu.unq.tvd.nclgenerator.generator.RegionExtensions.*

class NCLGenerator {
	
	protected NCL ncl
	
	def generateNCL(IFileSystemAccess fsa, NCL ncl) {
		this.ncl = ncl
		fsa.generateFile(ncl.name + '.ncl', generate)
	}
	
	def generate(){
		'''
		<?xml version="1.0" encoding="ISO-8859-1"?>
		<!-- Generated by NCL Generator -->
		<ncl id="«ncl.name»" xmlns="http://www.ncl.org.br/NCL3.0/EDTVProfile">
		    <head>
		    	«generateRegions»
		        «generateDescriptors»
		    </head>
		
		    <body>
		        «generatePorts»
		        «generateMedias»
		    </body>
		</ncl>
		'''
	}
	
	def generateMedias() {
		'''
		«FOR m: ncl.medias»
		<media id="«m.name»" «m.addSrcOrType»/>
		«ENDFOR»
		'''
	}
	
	def generatePorts() {
		//TODO
		'''
		«FOR m: ncl.filterMediasWithoutType»
		<port id="port«m.name.toFirstUpper»" component="«m.name»"/> 
		«ENDFOR»
		'''
	}
	
	def generateRegions() {
		if (!ncl.regions.empty)
			'''
			<regionBase>
			«FOR region: ncl.regions»
			<region id="reg«region.name»" «region.addProperties»
			«ENDFOR»
			</regionBase>	
			'''
	}
	
	def generateDescriptors() {
		if(!ncl.regions.empty)
			'''
			<descriptorBase>
			«FOR region: ncl.regions»
			<descriptor id="desc«region.name.toFirstUpper»" region="reg«region.name»"/>
			«ENDFOR»
			</descriptorBase>		
			'''
	}
	
}