/*
 * generated by Xtext 2.9.1
 */
package ar.edu.unq.tvd.nclgenerator.formatting2

import ar.edu.unq.tvd.nclgenerator.nCLGenerator.ConditionAction
import ar.edu.unq.tvd.nclgenerator.nCLGenerator.Media
import ar.edu.unq.tvd.nclgenerator.nCLGenerator.MediaProperty
import ar.edu.unq.tvd.nclgenerator.nCLGenerator.NCL
import ar.edu.unq.tvd.nclgenerator.nCLGenerator.Region
import ar.edu.unq.tvd.nclgenerator.nCLGenerator.RegionProperty
import ar.edu.unq.tvd.nclgenerator.services.NCLGeneratorGrammarAccess
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class NCLGeneratorFormatter extends AbstractFormatter2 {
	
	@Inject extension NCLGeneratorGrammarAccess

	def dispatch void format(NCL nCL, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Region regions : nCL.getRegions()) {
			regions.format;
		}
		for (Media medias : nCL.getMedias()) {
			medias.format;
		}
	}

	def dispatch void format(Region region, extension IFormattableDocument document) {
		region.regionFor.keyword("region").prepend[newLines = 2]
		region.regionFor.keyword("{").prepend[space = " "]
		region.regionFor.keyword("}").prepend[newLine]
		for (RegionProperty regionProperties : region.getRegionProperties()) {
			regionProperties.format;
		}
	}
	
	// TODO: implement for ConditionAction, SimpleAction, CompoundAction, OnSelection, Set
}
