/*
 * generated by Xtext 2.9.1
 */
package ar.edu.unq.tvd.nclgenerator.validation

import ar.edu.unq.tvd.nclgenerator.nCLGenerator.Media
import ar.edu.unq.tvd.nclgenerator.nCLGenerator.NCL
import org.eclipse.xtext.validation.Check
import ar.edu.unq.tvd.nclgenerator.nCLGenerator.NCLGeneratorPackage
import ar.edu.unq.tvd.nclgenerator.nCLGenerator.Region
import static extension ar.edu.unq.tvd.nclgenerator.generator.RegionExtensions.*
import static extension ar.edu.unq.tvd.nclgenerator.generator.MediaExtensions.*
import ar.edu.unq.tvd.nclgenerator.nCLGenerator.RegionProperty
import ar.edu.unq.tvd.nclgenerator.nCLGenerator.MediaProperty

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class NCLGeneratorValidator extends AbstractNCLGeneratorValidator {
	
	public static val DUPLICATE_NAME = 'duplicateName'
	public static val DUPLICATE_REGION_PROPERTY = 'duplicateRegionProperty'
	public static val DUPLICATE_MEDIA_PROPERTY = 'duplicateMediaProperty'

	@Check
	def checkExtencionDemas(NCL ncl){
		if(ncl.name.contains('.ncl'))
			error("El nombre del archivo no deve llevar la extencion", null)
	}
	
	@Check
	def checkForMediasWithSameName(Media media) {
		if(media.ncl.medias.filter[m | m.name.toLowerCase == media.name.toLowerCase].size > 1){
			error('''Duplicate media '«media.name»' ''', media, NCLGeneratorPackage.Literals.MEDIA__NAME, DUPLICATE_NAME)
		}
	}
	
	@Check
	def checkForRegionsWithSameName(Region region) {
		if(region.ncl.regions.filter[r | r.name.toLowerCase == region.name.toLowerCase].size > 1){
			error('''Duplicate region '«region.name»' ''', region, NCLGeneratorPackage.Literals.REGION__NAME, DUPLICATE_NAME)
		}
	}
	
	@Check
	def checkForDuplicatePropertiesInRegion(Region it){
		for (property : regionProperties)
			if(hasDuplicates(property))
				error('''Duplicate property '«property.name»' in Region.«name» ''', property, NCLGeneratorPackage.Literals.REGION_PROPERTY__NAME, DUPLICATE_REGION_PROPERTY)
	}
	
	@Check
	def checkForDuplicatePropertiesInMedia(Media it){
		for (property : properties)
			if(hasDuplicates(property))
				error('''Duplicate property '«property.name»' in Media.«name» ''', property, NCLGeneratorPackage.Literals.MEDIA_PROPERTY__NAME, DUPLICATE_MEDIA_PROPERTY)
	}
	
	@Check
	def checkForValidPropertiesInRegion(Region it){
		for(property: regionProperties){
			if(!DefaultData.regionPropertiesList.contains(property.name))
				warning('''It seems that '«property.name»' is not a valid property for Region.«name».''', property, null, null)
		}
	}
	
	@Check
	def checkForValidPropertiesInMedia(Media it){
		for(property: properties){
			if(!DefaultData.mediaPropertiesList.contains(property.name))
				warning('''It seems that '«property.name»' is not a valid property for Media.«name».''', property, null, null)
		}
	}
	
	def private hasDuplicates(Region it, RegionProperty property){
		regionProperties.filter[p | p.name == property.name].size > 1
	}
	def private hasDuplicates(Media it, MediaProperty property){
		properties.filter[p | p.name == property.name].size > 1
	}
}
